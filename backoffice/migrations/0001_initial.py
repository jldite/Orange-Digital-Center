# Generated by Django 5.0.4 on 2025-08-02 19:45

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import taggit.managers
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('taggit', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('gender', models.CharField(blank=True, choices=[('M', 'Homme'), ('F', 'Femme'), ('O', 'Autre'), ('P', 'Préfère ne pas dire')], max_length=1, null=True, verbose_name='Genre')),
                ('phone', models.CharField(blank=True, max_length=20, null=True, verbose_name='Téléphone')),
                ('birth_date', models.DateField(blank=True, null=True, verbose_name='Date de naissance')),
                ('organization', models.CharField(blank=True, max_length=255, null=True, verbose_name='Organisation/Établissement')),
                ('university', models.CharField(blank=True, max_length=100, null=True, verbose_name='Université')),
                ('qr_code', models.CharField(blank=True, max_length=100, null=True, verbose_name='QR Code')),
                ('role', models.CharField(choices=[('ADMIN', 'Administrateur'), ('STAFF', 'Personnel ODC'), ('TRAINER', 'Formateur'), ('PARTICIPANT', 'Participant')], default='PARTICIPANT', max_length=20, verbose_name='Rôle')),
                ('photo', models.ImageField(blank=True, null=True, upload_to='user_photos/', verbose_name='Photo de profil')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Utilisateur',
                'verbose_name_plural': 'Utilisateurs',
                'ordering': ['-date_joined'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='Titre')),
                ('description', models.TextField(verbose_name='Description')),
                ('type', models.CharField(choices=[('FORMATION', 'Formation'), ('CONF', 'Conférence'), ('TALK', 'Talk'), ('OPENLAB', 'Open lab'), ('FABCAFE', 'Fab café'), ('MASTERCLASS', 'Master class'), ('ATELIER', 'Atelier'), ('SUPERCODEURS', 'Super codeurs'), ('MAKERJUNIOR', 'Maker junior')], default='FORMATION', max_length=20, verbose_name="Type d'événement")),
                ('location', models.CharField(choices=[('DIGITAL', 'Digital'), ('FABLAB', 'Fab lab'), ('FAB', 'Fab'), ('ODCCLUBS', 'ODC clubs')], default='DIGITAL', max_length=20, verbose_name='Lieu')),
                ('status', models.CharField(choices=[('UPCOMING', 'À venir'), ('ONGOING', 'En cours'), ('COMPLETED', 'Terminé'), ('CANCELED', 'Annulé')], default='UPCOMING', max_length=20, verbose_name='Statut')),
                ('start_date', models.DateTimeField(verbose_name='Date et heure de début')),
                ('end_date', models.DateTimeField(verbose_name='Date et heure de fin')),
                ('registration_deadline', models.DateTimeField(blank=True, null=True, verbose_name="Date limite d'inscription")),
                ('capacity', models.PositiveIntegerField(default=30, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Capacité maximale')),
                ('is_published', models.BooleanField(default=False, verbose_name='Publié')),
                ('requires_approval', models.BooleanField(default=True, verbose_name='Nécessite approbation')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('organizer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='organized_events', to=settings.AUTH_USER_MODEL, verbose_name='Organisateur')),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'verbose_name': 'Événement',
                'verbose_name_plural': 'Événements',
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='Application',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('PENDING', 'En attente'), ('APPROVED', 'Approuvé'), ('REJECTED', 'Rejeté'), ('WAITLISTED', "Liste d'attente"), ('CANCELLED', 'Annulé')], default='PENDING', max_length=20, verbose_name="Statut de l'inscription")),
                ('applied_at', models.DateTimeField(auto_now_add=True, verbose_name="Date d'inscription")),
                ('approved_at', models.DateTimeField(blank=True, null=True, verbose_name="Date d'approbation")),
                ('rejection_reason', models.TextField(blank=True, null=True, verbose_name='Raison du rejet')),
                ('motivation', models.TextField(blank=True, null=True, verbose_name='Motivation')),
                ('expectations', models.TextField(blank=True, null=True, verbose_name='Attentes')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='applications', to=settings.AUTH_USER_MODEL, verbose_name='Participant')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='applications', to='backoffice.event', verbose_name='Événement')),
            ],
            options={
                'verbose_name': 'Inscription',
                'verbose_name_plural': 'Inscriptions',
                'ordering': ['-applied_at'],
            },
        ),
        migrations.CreateModel(
            name='EventDate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(verbose_name='Date de session')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attendance_dates', to='backoffice.event', verbose_name='Événement')),
            ],
            options={
                'verbose_name': "Date d'événement",
                'verbose_name_plural': "Dates d'événement",
                'ordering': ['date'],
            },
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='Titre du rapport')),
                ('report_type', models.CharField(choices=[('PARTICIPATION', 'Rapport de participation'), ('ATTENDANCE', 'Rapport de présence'), ('EVENT', "Rapport d'événement"), ('USER', 'Rapport utilisateur'), ('FINANCIAL', 'Rapport financier')], default='PARTICIPATION', max_length=20, verbose_name='Type de rapport')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('start_date', models.DateField(verbose_name='Date de début')),
                ('end_date', models.DateField(verbose_name='Date de fin')),
                ('generated_file', models.FileField(blank=True, null=True, upload_to='reports/%Y/%m/%d/', verbose_name='Fichier généré')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='generated_reports', to=settings.AUTH_USER_MODEL, verbose_name='Créé par')),
                ('event', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='backoffice.event', verbose_name='Événement spécifique')),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Filtres par tags')),
            ],
            options={
                'verbose_name': 'Rapport',
                'verbose_name_plural': 'Rapports',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Attendance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(verbose_name='Date')),
                ('present', models.BooleanField(default=False, verbose_name='Présent')),
                ('check_in', models.DateTimeField(blank=True, null=True, verbose_name="Heure d'arrivée")),
                ('check_out', models.DateTimeField(blank=True, null=True, verbose_name='Heure de départ')),
                ('application', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attendance', to='backoffice.application', verbose_name='Inscription')),
            ],
            options={
                'verbose_name': 'Présence',
                'verbose_name_plural': 'Présences',
                'ordering': ['date'],
                'unique_together': {('application', 'date')},
            },
        ),
        migrations.AddIndex(
            model_name='event',
            index=models.Index(fields=['start_date'], name='backoffice__start_d_e65dfc_idx'),
        ),
        migrations.AddIndex(
            model_name='event',
            index=models.Index(fields=['status'], name='backoffice__status_4a2919_idx'),
        ),
        migrations.AddIndex(
            model_name='event',
            index=models.Index(fields=['type'], name='backoffice__type_ceb9b0_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='application',
            unique_together={('event', 'user')},
        ),
        migrations.AlterUniqueTogether(
            name='eventdate',
            unique_together={('event', 'date')},
        ),
    ]
